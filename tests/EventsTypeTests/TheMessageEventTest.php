<?php

namespace Jose13\LaravelLineBotLottery\tests\EventsTypeTests;

use Exception;
use Jose13\LaravelLineBotLottery\Services\Factory\MessageEventTypeFactory;
use Jose13\LaravelLineBotLottery\Services\LineSupportEvents\EventsType\MessageEventType\TextResponse;
use Jose13\LaravelLineBotLottery\Services\LineSupportEvents\EventsType\TheMessageEvent;
use Jose13\LaravelLineBotLottery\Services\LineTemplateService\LineTemplateBuildService;
use LINE\LINEBot;
use LINE\LINEBot\Event\BaseEvent;
use LINE\LINEBot\MessageBuilder\TextMessageBuilder;
use LINE\LINEBot\Response;
use Mockery;
use Tests\TestCase;

class TheMessageEventTest extends TestCase
{
    /**
     * @var LineTemplateBuildService|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $LineTemplateBuildService;
    /**
     * @var BaseEvent|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $BaseEvent;
    /**
     * @var LINEBot|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $LINEBot;

    /**
     * @var MessageEventTypeFactory|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $MessageEventTypeFactory;
    /**
     * @var Response|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $Response;


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->LineTemplateBuildService = Mockery::mock(LineTemplateBuildService::class);
        $this->MessageEventTypeFactory = Mockery::mock(MessageEventTypeFactory::class);
        $this->BaseEvent = Mockery::mock(BaseEvent::class);
        $this->LINEBot = Mockery::mock(LINEBot::class);
        $this->Response = Mockery::mock(Response::class);

    }

    public function tearDown(): void
    {
        parent::tearDown();
        Mockery::close();
    }

    public function testMessageEventAndGetReplyResultShouldBeErrorMessage()
    {
        $charts = 'UserChats';

        $this->BaseEvent->shouldReceive('getText')
            ->once()
            ->andReturn('12345');

        $textResponse = Mockery::mock(new TextResponse($this->BaseEvent,$charts));

        $this->MessageEventTypeFactory->shouldReceive('makeTypeClass')
            ->once()
            ->with($this->BaseEvent,$charts)
            ->andReturn($textResponse);


        $joinEvent = new TheMessageEvent(
            $this->BaseEvent,
            $charts,
            $this->LINEBot,
            $this->LineTemplateBuildService,
            $this->MessageEventTypeFactory);

        try {
            $replyResult = $joinEvent->getReplyResult();
        } catch (Exception $e) {
            $replyResult = $e->getMessage();
        }

        $this->assertEquals('this text content not support return',$replyResult);
    }




    public function testMessageEventAndGetReplyResultShouldBeSuccess()
    {
        $charts = 'UserChats';


        $this->BaseEvent->shouldReceive('getReplyToken')
            ->once()
            ->andReturn('123');

        $this->BaseEvent->shouldReceive('getText')
            ->once()
            ->andReturn('hello');

        $textResponse = Mockery::mock(new TextResponse($this->BaseEvent,$charts));

        $this->MessageEventTypeFactory->shouldReceive('makeTypeClass')
            ->once()
            ->with($this->BaseEvent,$charts)
            ->andReturn($textResponse);

        $this->LineTemplateBuildService->shouldReceive('createTextMessageBuilder')
            ->once()
            ->andReturn(new TextMessageBuilder('hi'));
        $this->LINEBot->shouldReceive('replyMessage')
            ->once()
            ->andReturn($this->Response);

        $this->Response->shouldReceive('isSucceeded')
            ->once()
            ->andReturn('success');

        $theMessageEvent = new TheMessageEvent(
            $this->BaseEvent,
            $charts,
            $this->LINEBot,
            $this->LineTemplateBuildService,
            $this->MessageEventTypeFactory
        );

        try {
            $replyResult = $theMessageEvent->getReplyResult();
        } catch (Exception $e) {
            $replyResult = $e->getMessage();
        }
        $this->assertEquals('success',$replyResult);
    }
}
