<?php

namespace Jose13\LaravelLineBotLottery\tests;

use Exception;
use Illuminate\Http\Request;
use Jose13\LaravelLineBotLottery\Services\CheckSignatureService;
use LINE\LINEBot;
use Mockery;
use Tests\TestCase;

class CheckSignatureServiceTest extends TestCase
{
    /**
     * @var Request|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $request;

    /**
     * @var mixed
     */
    private $bot;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->bot = app()->make('line-bot');
        $this->request = Mockery::mock(Request::class);


    }

    public function tearDown(): void
    {
        parent::tearDown();
        Mockery::close();
    }


    public function testGetWebhookEventShouldBeBadRequest()
    {
        $this->request->shouldReceive('header')
            ->once()
            ->withAnyArgs()
            ->andReturn(null);
        $checkSignatureService = new CheckSignatureService;
        try {
            $return = $checkSignatureService->getWebhookEvents($this->bot, $this->request);
        } catch (Exception $e) {
            $return = $e->getMessage();
        }
        $this->assertEquals('Bad Request', $return);
    }

    public function testGetWebhookEventsShouldBeRequestDoesNotContainSignature()
    {
        $content = '{
        "destination":"U0f3231d418f946bae29c2bc88c321684",
        "events":[{"type":"message","message":{"type":"text","id":"14750499165387","text":"..."},"timestamp":1631698942518,"source":{"type":"user","userId":"U6725fca1ed55d0a01fdc73634b5dbe28"},"replyToken":"a8369ce654f54f90a494fb7eb537831b","mode":"active"}]}';

        $this->request->shouldReceive('header')
            ->once()
            ->withAnyArgs()
            ->andReturn(' ');

        $this->request->shouldReceive('getContent')
            ->once()
            ->withAnyArgs()
            ->andReturn($content);

        $checkSignatureService = new CheckSignatureService;
        try {
            $return = $checkSignatureService->getWebhookEvents($this->bot, $this->request);
        } catch (Exception $e) {
            $return = $e->getMessage();
        }
        $this->assertEquals('Request does not contain signature', $return);
    }

    public function testGetWebhookEventsShouldBeInvalidSignatureHasGiven()
    {
        $content = '{
        "destination":"U0f3231d418f946bae29c2bc88c321684",
        "events":[{"type":"message","message":{"type":"text","id":"14750499165387","text":"..."},"timestamp":1631698942518,"source":{"type":"user","userId":"U6725fca1ed55d0a01fdc73634b5dbe28"},"replyToken":"a8369ce654f54f90a494fb7eb537831b","mode":"active"}]}';

        $this->request->shouldReceive('header')
            ->once()
            ->withAnyArgs()
            ->andReturn('UVgol/5PVwSdVfKR');

        $this->request->shouldReceive('getContent')
            ->once()
            ->withAnyArgs()
            ->andReturn($content);

        $checkSignatureService = new CheckSignatureService;
        try {
            $return = $checkSignatureService->getWebhookEvents($this->bot, $this->request);
        } catch (Exception $e) {
            $return = $e->getMessage();
        }
        $this->assertEquals('Invalid signature has given', $return);
    }


    public function testGetWebhookEventsShouldBeObject()
    {
        $content = '{"destination":"U0f3231d418f946bae29c2bc88c321684","events":[{"type":"message","message":{"type":"text","id":"14750499165387","text":"..."},"timestamp":1631698942518,"source":{"type":"user","userId":"U6725fca1ed55d0a01fdc73634b5dbe28"},"replyToken":"a8369ce654f54f90a494fb7eb537831b","mode":"active"}]}';

        $this->request->shouldReceive('header')
            ->once()
            ->withAnyArgs()
            ->andReturn("UVgol/5PVwSdVfKRFa0kJtZmx4CTyn4VZo/H0c2HDWo=");

        $this->request->shouldReceive('getContent')
            ->once()
            ->withAnyArgs()
            ->andReturn($content);

        $checkSignatureService = new CheckSignatureService;
        try {
            $return = $checkSignatureService->getWebhookEvents($this->bot, $this->request);
        } catch (Exception $e) {
            $return = $e->getMessage();
        }
        $this->assertIsObject($return[0]);
    }


}
