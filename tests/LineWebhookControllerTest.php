<?php

namespace Jose13\LaravelLineBotLottery\tests;


use Exception;
use Illuminate\Contracts\Container\Container;
use Illuminate\Http\Request;
use Jose13\LaravelLineBotLottery\Controllers\LineWebhookController;
use Jose13\LaravelLineBotLottery\Services\CheckSignatureService;
use Jose13\LaravelLineBotLottery\Services\LineBotService;
use Mockery;
use Tests\TestCase;

class LineWebhookControllerTest extends TestCase
{
    /**
     * @var Request|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $Request;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->Request = Mockery::mock(Request::class);
    }
    public function tearDown(): void
    {
        parent::tearDown();
        Mockery::close();
    }


    public function testLineWebhookControllerByTextMessageEventAndGetErrorMessage()
    {
        $Container = app(Container::class);
        $CheckSignatureService =app(CheckSignatureService::class);
        $LineBotService =app(LineBotService::class);

        $content = '{"destination":"U0f3231d418f946bae29c2bc88c321684","events":[{"type":"message","message":{"type":"text","id":"14761379690618","text":"test"},"timestamp":1631862147141,"source":{"type":"user","userId":"U6725fca1ed55d0a01fdc73634b5dbe28"},"replyToken":"78db7a320cef4d84869e56bf5df76cbf","mode":"active"}]}';

        $this->Request->shouldReceive('header')
            ->once()
            ->withAnyArgs()
            ->andReturn("CPWEmeHf1wlrs/6tQEy9ZXdmALSX/WaupkUtJBZ06zQ=");

        $this->Request->shouldReceive('getContent')
            ->once()
            ->withAnyArgs()
            ->andReturn($content);

        try {
            $hook = new LineWebhookController($Container,$CheckSignatureService, $LineBotService);
            $response = $hook->webhook($this->Request);
        } catch (Exception $e) {
            $response = $e->getMessage();
        }
        $this->assertEquals('this text content not support return',$response->getContent());
        $this->assertSame(404, $response->getStatusCode());

    }

}
