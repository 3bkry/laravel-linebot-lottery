<?php

namespace Jose13\LaravelLineBotLottery\tests\EventsTypeTests\PostbackActionTypeTests;


use Jose13\LaravelLineBotLottery\Services\CrawlersService\TaiwanLottery\FiveThreeNine;

use Jose13\LaravelLineBotLottery\Services\Factory\TemplateTypeFactory;
use Jose13\LaravelLineBotLottery\Services\LineSupportEvents\EventsType\PostbackActionType\DateTimePickQuickAction;
use Jose13\LaravelLineBotLottery\Services\LineTemplateService\TemplateType\FullBubble;
use LINE\LINEBot\Event\BaseEvent;
use Mockery;
use Tests\TestCase;
use LINE\LINEBot;

class NormalQuickActionTest extends TestCase
{
    /**
     * @var FiveThreeNine|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $fiveThreeNine;
    /**
     * @var LINEBot\Event\BaseEvent|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $baseEvent;
    /**
     * @var FullBubble|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $fullBubble;
    /**
     * @var TemplateTypeFactory|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $templateTypeFactory;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->fullBubble = Mockery::mock(FullBubble::class);
        $this->templateTypeFactory = Mockery::mock(TemplateTypeFactory::class);
        $this->fiveThreeNine = Mockery::mock(FiveThreeNine::class);
        $this->baseEvent = Mockery::mock(BaseEvent::class);

    }

    public function tearDown(): void
    {
        parent::tearDown();
        Mockery::close();
    }


    public function testGetResponseAndReturnObjectsArray()
    {

        $this->fullBubble->shouldReceive('getBubbleBuild')
            ->once()
            ->withAnyArgs()
            ->andReturn(['obj'=>'ballTemplate']);

        $this->templateTypeFactory
            ->shouldReceive('makeTypeClass')
            ->once()
            ->withAnyArgs()
            ->andReturn($this->fullBubble);

        $this->fiveThreeNine
            ->shouldReceive('getGameBallData')
            ->once()
            ->withAnyArgs()
            ->andReturn(
                [
                    [
                        '期別' => "999",
                        '開獎日期' => "110/08/08",
                        "最新累積頭獎金額" => "1000",
                        "本期頭獎單注獎金" => "500",
                        "本期中獎注數" => "500",
                        "落球順序" => "00",
                        "大小順序" => "00",
                        "一般球區" => "00",
                        "頭部樣板" =>
                            [
                                "gameName" => "23",
                                "textColor" => "123",
                                "bgColor" => "123"
                            ],
                        "身體樣板" =>" ",
                        "底部樣板" =>[
                            "一般球區" => "00",
                        ]
                    ]
                ]);


        $postbackArray = [
            "data" => "FiveThreeNine&full&26",
            "params" => [
                "date" => "2021-08-08"
            ]
        ];
        $this->baseEvent->shouldReceive('getPostbackParams')
            ->once()
            ->andReturn($postbackArray['params']);

        $this->baseEvent->shouldReceive('getPostbackData')
            ->once()
            ->andReturn($postbackArray['data']);


        $dateTimePickQuickAction = new DateTimePickQuickAction($this->baseEvent,$this->fiveThreeNine,$this->templateTypeFactory);
        $dateTimePickQuickActionResponse = $dateTimePickQuickAction->getResponse();
        $this->assertIsArray( $dateTimePickQuickActionResponse);
    }
}
