<?php

namespace Jose13\LaravelLineBotLottery\tests\EventsTypeTests;


use Exception;
use Jose13\LaravelLineBotLottery\Services\CrawlersService\TaiwanLottery\FiveThreeNine;
use Jose13\LaravelLineBotLottery\Services\Factory\PostbackTypeWithGameFactory;
use Jose13\LaravelLineBotLottery\Services\Factory\TemplateTypeFactory;
use Jose13\LaravelLineBotLottery\Services\LineSupportEvents\EventsType\PostbackActionType\DateTimePickQuickAction;
use Jose13\LaravelLineBotLottery\Services\LineSupportEvents\EventsType\PostbackActionType\NormalQuickAction;
use Jose13\LaravelLineBotLottery\Services\LineSupportEvents\EventsType\ThePostbackEvent;
use Jose13\LaravelLineBotLottery\Services\LineTemplateService\LineTemplateBuildService;
use Jose13\LaravelLineBotLottery\Services\LineTemplateService\TemplateType\FullBubble;
use LINE\LINEBot;
use LINE\LINEBot\Event\BaseEvent;
use LINE\LINEBot\Event\PostbackEvent;
use LINE\LINEBot\QuickReplyBuilder\QuickReplyMessageBuilder;
use LINE\LINEBot\Response;
use Tests\TestCase;
use Mockery;

class ThePostbackEventTest extends TestCase
{
    /**
     * @var LineTemplateBuildService|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $LineTemplateBuildService;
    /**
     * @var PostbackTypeWithGameFactory|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $PostbackTypeWithGameFactory;
    /**
     * @var BaseEvent|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $BaseEvent;
    /**
     * @var LINEBot|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $LINEBot;
    /**
     * @var Response|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $Response;
    /**
     * @var FiveThreeNine|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $FiveThreeNine;
    /**
     * @var TemplateTypeFactory|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $TemplateTypeFactory;

    /**
     * @var FullBubble|Mockery\LegacyMockInterface|Mockery\MockInterface
     */
    private $FullBubble;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->BaseEvent = Mockery::mock(BaseEvent::class);

        $this->LineTemplateBuildService = Mockery::mock(LineTemplateBuildService::class);
        $this->FiveThreeNine = Mockery::mock(FiveThreeNine::class);
        $this->FullBubble = Mockery::mock(FullBubble::class);
        $this->TemplateTypeFactory = Mockery::mock(TemplateTypeFactory::class);
        $this->PostbackTypeWithGameFactory = Mockery::mock(PostbackTypeWithGameFactory::class);

        $this->LINEBot = Mockery::mock(LINEBot::class);
        $this->Response = Mockery::mock(Response::class);

    }

    public function tearDown(): void
    {
        parent::tearDown();
        Mockery::close();
    }

    public function testPostbackEventGetReplyResultShouldBeSuccess()
    {

        $charts = 'UserChats';
        $this->BaseEvent->shouldReceive('getReplyToken')
            ->once()
            ->andReturn('123');

        $postbackArray = [
            "data" => "FiveThreeNine&full&26",
            "params" => [
                "date" => "2021-08-08"
            ]
        ];
        $this->BaseEvent->shouldReceive('getPostbackData')
            ->times(3)
            ->andReturn($postbackArray['data']);

        $this->BaseEvent->shouldReceive('getPostbackParams')
            ->times(4)
            ->andReturn($postbackArray['params']);


        $this->FullBubble->shouldReceive('getBubbleBuild')
            ->once()
            ->andReturn(['objectArray']);


        $this->FiveThreeNine->shouldReceive('getGameBallData')
            ->once()
            ->withAnyArgs()
            ->andReturn(['開獎日期' => '110/08/08']);


        $this->TemplateTypeFactory->shouldReceive('makeTypeClass')
            ->once()
            ->andReturn($this->FullBubble);

        $buttonArray = ['最新539', '最新大樂透'];

        $this->LineTemplateBuildService->shouldReceive('createQuickReplayBuild')
            ->once()
            ->andReturn(new QuickReplyMessageBuilder($buttonArray));

        $this->LineTemplateBuildService->shouldReceive('createTextMessageBuilder')
            ->once();
        $this->LINEBot->shouldReceive('replyMessage')
            ->once()
            ->andReturn($this->Response);

        $this->Response->shouldReceive('isSucceeded')
            ->once()
            ->andReturn('success');


        $NormalQuickAction = Mockery::mock(new NormalQuickAction($this->BaseEvent, $this->FiveThreeNine, $this->TemplateTypeFactory));

        $this->PostbackTypeWithGameFactory->shouldReceive('makeTypeClass')
            ->once()
            ->with($this->BaseEvent)
            ->andReturn([$NormalQuickAction]);


        $thePostbackEvent = new ThePostbackEvent(
            $this->BaseEvent,
            $charts,
            $this->LINEBot,
            $this->LineTemplateBuildService,
            $this->PostbackTypeWithGameFactory
        );


        try {
            $replyResult = $thePostbackEvent->getReplyResult();
        } catch (Exception $e) {
            $replyResult = $e->getMessage();
        }
        $this->assertEquals('success', $replyResult);

    }


}
